# -*- coding: utf-8 -*-
"""Assignment_Day37_Exploring_Clustering_Techniques_with_Python_DimasAdiPrasetyo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Kl4npLTTR_DjgGvaSFFbBRAGJ5DTeKj1

# Customer Segmentation using K-Means Clustering

## Assignment Summary
Tugas ini bertujuan untuk melakukan segmentasi pelanggan menggunakan algoritma K-Means Clustering berdasarkan pola perjalanan pelanggan dalam industri penerbangan.

### Tools & Dataset
- Tools: Python, Google Colaboratory, Scikit-learn, Seaborn, Matplotlib
- Dataset: [https://drive.google.com/file/d/1BC8oxajBeD3GGtlYkUNoc7dHHbOLFbcm/view?usp=drive_link](#)

### Metode
- Feature Selection (RFM: Recency, Frequency, Monetary)
- Standardisasi
- K-Means Clustering
- Evaluasi dengan Elbow & Silhouette Score
- Visualisasi dengan PCA

### Ringkasan Hasil
Clustering membagi pelanggan menjadi beberapa kelompok utama seperti pelanggan VIP, pelanggan churn, dan pelanggan potensial baru.
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

"""## Data Understanding"""

df = pd.read_csv('flight.csv')


df.head()

df['MEMBER_NO'].value_counts()

df.info()

"""# build dataset

### RFM Feature Explanation
Fitur `Recency`, `Frequency`, dan `Monetary` tidak tersedia secara langsung dalam dataset asli.
Fitur ini dihitung berdasarkan:
- `Recency`: menggunakan `LAST_TO_END`
- `Frequency`: jumlah penerbangan (`FLIGHT_COUNT`)
- `Monetary`: jumlah poin dari `Points_Sum`

Tujuan dari transformasi ini adalah untuk memahami perilaku pelanggan dalam hal seberapa sering, baru, dan bernilai aktivitas penerbangan mereka.
"""

# Buat DataFrame baru untuk RFM
rfm = df[['MEMBER_NO', 'LAST_TO_END', 'FLIGHT_COUNT', 'Points_Sum']].copy()

# Ganti nama kolom agar sesuai konsep RFM
rfm.columns = ['CustomerID', 'Recency', 'Frequency', 'Monetary']

rfm.head()

"""### Drop missing value"""

rfm.info()

rfm.isnull().sum()

rfm.describe()

"""### Drop duplicates"""

rfm.duplicated().sum()

"""### Feature Selection"""

feat = ['Recency','Frequency','Monetary']
dataset = rfm[feat].copy()

"""## Modeling and Evaluation

### Scaling
"""

# Scaling
scaler = StandardScaler()
rfm_scaled = scaler.fit_transform(rfm[['Recency', 'Frequency', 'Monetary']])

feats = list(dataset)
new_df = pd.DataFrame(data = rfm_scaled, columns = feats)
new_df.head()

"""### Inertia"""

from sklearn.cluster import KMeans
inertia = []

for i in range(3, 15):
    kmeans = KMeans(n_clusters=i, random_state=0)
    kmeans.fit(rfm_scaled)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(10, 5))

sns.lineplot(x=range(3, 15), y=inertia, color='#000087', linewidth = 4)
sns.scatterplot(x=range(3, 15), y=inertia, s=300, color='#800000',  linestyle='--')

"""## Silhouette score"""

range_n_clusters = list(range(3,15))
print(range_n_clusters)

arr_silhouette_score_euclidean = []
for i in range_n_clusters:
    kmeans = KMeans(n_clusters=i).fit(rfm_scaled)
    preds = kmeans.predict(new_df)

    score_euclidean = silhouette_score(new_df, preds, metric='euclidean')
    arr_silhouette_score_euclidean.append(score_euclidean)

fig, ax = plt.subplots(1,2,figsize=(15, 6))
sns.lineplot(x=range(3,15), y=arr_silhouette_score_euclidean, color='#000087', linewidth = 4, ax=ax[0])
sns.scatterplot(x=range(3,15), y=arr_silhouette_score_euclidean, s=300, color='#800000',  linestyle='--',ax=ax[0])

sns.lineplot(x=range(3, 15), y=inertia, color='#000087', linewidth = 4,ax=ax[1])
sns.scatterplot(x=range(3, 15), y=inertia, s=300, color='#800000',  linestyle='--', ax=ax[1])

## Candidat clustering 5 dan 9

"""### Clustering"""

kmeans = KMeans(n_clusters=8, random_state=0)
kmeans.fit(new_df)

dataset['clusters'] = kmeans.labels_
dataset.head()

perc = [0.1,0.2,0.3,00.4,0.5,0.6,0.7,0.8,0.9]
dataset.describe(percentiles=perc)

dataset.groupby('clusters').agg({
                            'Recency' : ['median'],
                            'Frequency' : ['mean'],
                            'Monetary' : ['mean']

})

"""## Clustering Analysis"""

# 0 : Lost customer (churn)
# 1 : Normal user potensial
# 2 : New user sangat potensial
# 3 : User biasa
# 4 : VIP / High value customer
# 5 : Old user tidak berpotensi
# 6 : New user sangat potensial
# 7 : New user butuh perhatian

# cluster bagus

"""## Viz Clustering with PCA - Optional"""

from sklearn.decomposition import PCA
pca = PCA(n_components=2)

pca.fit(rfm_scaled)
pcs = pca.transform(rfm_scaled)

data_pca = pd.DataFrame(data = pcs, columns = ['PC 1', 'PC 2'])
data_pca['clusters'] = dataset['clusters']
data_pca.head()

fig, ax = plt.subplots(figsize=(7,5))

sns.scatterplot(
    x="PC 1", y="PC 2",
    hue="clusters",
    edgecolor='green',
    linestyle='--',
    data=data_pca,
    s=160,
    ax=ax
)

from mpl_toolkits.mplot3d import Axes3D

pca = PCA(n_components=3)

pca.fit(rfm_scaled)
pcs = pca.transform(rfm_scaled)

data_pca_3d = pd.DataFrame(data = pcs, columns = ['PC 1', 'PC 2', 'PC 3'])
data_pca_3d['clusters'] = dataset['clusters']

fig = plt.figure(figsize=(10, 8))
ax = fig.add_subplot(111, projection='3d')

scatter = ax.scatter(data_pca_3d['PC 1'], data_pca_3d['PC 2'], data_pca_3d['PC 3'],
                     c=data_pca_3d['clusters'], cmap='viridis', s=50)

ax.set_xlabel('PC 1')
ax.set_ylabel('PC 2')
ax.set_zlabel('PC 3')
ax.set_title('3D PCA Clustering Visualization')

# Add a color bar
legend = ax.legend(*scatter.legend_elements(), title="Clusters")
ax.add_artist(legend)

plt.show()

"""## Business Insight dan Rekomendasi per Cluster

Berdasarkan hasil clustering, berikut adalah karakteristik dan rekomendasi strategi:

- **Cluster 0 (Lost Customer / Churn):**
  - Recency tinggi, Frequency rendah, Monetary rendah
  - Rekomendasi: kirimkan penawaran khusus atau diskon untuk menarik kembali

- **Cluster 1 (Potensial Normal User):**
  - Keseimbangan RFM
  - Rekomendasi: kembangkan engagement lewat program loyalitas

- **Cluster 2 & 6 (New User Sangat Potensial):**
  - Recency rendah (baru), tapi frequency dan monetary mulai tinggi
  - Rekomendasi: perkuat onboarding dan promosi awal

- **Cluster 4 (VIP / High Value Customer):**
  - Semua metrik tinggi
  - Rekomendasi: berikan layanan eksklusif dan program loyalitas prioritas

- **Cluster 5 (Old User Tidak Berpotensi):**
  - Tidak aktif, historis tinggi
  - Rekomendasi: tidak perlu alokasi biaya pemasaran lebih lanjut

- **Cluster 7 (New User Butuh Perhatian):**
  - Baru, tapi belum menunjukkan potensi
  - Rekomendasi: kirim welcome campaign dan edukasi fitur

"""